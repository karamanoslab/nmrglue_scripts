import tkinter as tk
from tkinter import filedialog
from matplotlib.backends.backend_tkagg import (FigureCanvasTkAgg,  NavigationToolbar2Tk)
import matplotlib.backends.backend_tkagg as tkagg 
import matplotlib.pyplot as plt
import matplotlib as mpl
import numpy as np
import warnings
warnings.filterwarnings("ignore")

from tools2D import *

'author=theok'

class NmrEditor:
    '''A text editor and spectrum plotting tool that allows titration data to be plotted
     Input: (generated by the peak.com nmrpipe scripts for now) 

     #ass spectrum  1H  15N    intensity
     138.H;138.N 1 8.011 124.511 8.179740e+06
     ..

     NMR editor will extract the region around each peak and plot the spectra with p. Assignemts 
     will be ploted as s(spectrum number) p(peak number).
     n moves to the next sepctrum, o overlays all spectra in a new window. If the peak picker has 
     peaked other peaks you can edit the input file directly in the editor and replot. Contour levels 
     can be adjusted with the slider. 

     Can be used with hz or ppm scales in the input file
    '''

    def __init__(self, input, specs, scale='ppm'):

        global counter
        counter = 0

        global overlay
        overlay=False   

        self.window = tk.Tk()
        
        self.text_area = tk.Text(self.window, wrap=tk.WORD)
        self.text_area.pack(expand=tk.YES, fill=tk.BOTH)

        self.window.geometry("1000x1000")

        btn_window=tk.Frame( self.window, height=100, width=1000)
        btn_window.pack(side=tk.TOP, expand=tk.NO, fill=None )

        # button that displays the plot 
        plot_button = tk.Button(master = btn_window,  
                            command = self.plot, 
                            height = 2,  
                            width = 10, 
                            text = "Plot (p)") 
        
        plot_button.pack(side=tk.LEFT) 

        next_button = tk.Button(master = btn_window,  
                            command = self.next, 
                            height = 2,  
                            width = 10, 
                            text = "Next spec (n)") 
        next_button.pack(side=tk.LEFT)

        save_button = tk.Button(master = btn_window,  
                            command = self.save_file, 
                            height = 2,  
                            width = 10, 
                            text = "Save txt") 
        save_button.pack(side=tk.LEFT)

        over_button = tk.Button(master = btn_window,  
                            command = self.overlay_specs, 
                            height = 2,  
                            width = 10, 
                            text = "Overlay (o)") 
        over_button.pack(side=tk.LEFT)

        close_button = tk.Button(master = btn_window,  
                            command = self.close, 
                            height = 2,  
                            width = 10, 
                            text = "Close (c)") 
        close_button.pack(side=tk.LEFT)

        #countours slider
        self.c1 = tk.DoubleVar(value=800000) 
        s1 = tk.Scale( btn_window, variable = self.c1,  from_ = 1E4, to = 1E7,  orient = tk.HORIZONTAL)
        self.l1 = tk.Label(btn_window)
        l3 = tk.Label(btn_window, text = "Cont") 
        s1.pack(side=tk.LEFT)
        l3.pack(side=tk.LEFT)

        self.fig = plt.figure(0, figsize=(5, 5))
        #self.ax = self.fig.add_subplot(111)  

        self.canvas = FigureCanvasTkAgg(self.fig,  master = self.window)   
        # creating the Matplotlib toolbar 
        self.toolbar =NavigationToolbar2Tk(self.canvas, self.window, pack_toolbar = False ) 
        self.toolbar.update() 
       
        #self.canvas.get_tk_widget()
        self.toolbar.pack() 
        self.canvas.get_tk_widget().pack() 
        
        self.inputfile=input
        self.specs=specs
        self.scale=scale

        self.create_menu()
         
        if self.inputfile!='':
            self.open_file(input)
        
        self.window.protocol('WM_DELETE_WINDOW', self.close)
        self.window.mainloop() 


    def create_menu(self):
        menu = tk.Menu(self.window)
        self.window.config(menu=menu)

        file_menu = tk.Menu(menu)
        menu.add_cascade(label="File", menu=file_menu)
        file_menu.add_command(label="New", command=self.new_file)
        file_menu.add_command(label="Open", command=self.open_file)
        file_menu.add_command(label="Save", command=self.save_file)
        file_menu.add_separator()
        file_menu.add_command(label="Clear canvas", command=self.clear_canvas)
        file_menu.add_command(label="Exit", command=self.close, accelerator="Ctrl+Q")
        self.window.bind("<Control-s>", self.save_file )
        self.window.bind("<n>", self.next )
        self.window.bind("<p>", self.plot )
        self.window.bind("<c>", self.close )
        self.window.bind("<o>", self.overlay_specs )


    def new_file(self):
        self.text_area.delete(1.0, tk.END)

    def open_file(self, file):
        try:
            self.window.title(f"Python NMR Editor - {file}")
            self.text_area.delete(1.0, tk.END)
            with open(file, "r") as file_handler:
                self.text_area.insert(tk.INSERT, file_handler.read())

        except:
            file = filedialog.askopenfilename(defaultextension=".txt", filetypes=[("Text Files", "*.txt"), ("All Files", "*.*")])
            if file:
                self.window.title(f"Python NMR Editor - {file}")
                self.text_area.delete(1.0, tk.END)
                with open(file, "r") as file_handler:
                    self.text_area.insert(tk.INSERT, file_handler.read())


    def save_file(self, _event=None):
        try:
            with open(self.inputfile, "w") as file_handler:
                file_handler.write(self.text_area.get(1.0, tk.END))
            self.window.title(f"Python NMR Editor - {self.inputfile}")
    
        except:
            file = filedialog.asksaveasfilename(defaultextension=".txt", filetypes=[("Text Files", "*.txt"), ("All Files", "*.*")])
            if file:
                with open(file, "w") as file_handler:
                    file_handler.write(self.text_area.get(1.0, tk.END))
                self.window.title(f"Python NMR Editor - {file}")
        print('File saved')
        global counter
        counter=0
        plt.clf()
        self.canvas.draw()
    
    def close(self, _event=None):
        plt.close('all')
        self.window.destroy()
    
    def close_overlay(self, _event=None):
        plt.close(self.fig1)
        self.overlay_window.destroy()
    
    def clear_canvas(self):
        plt.clf()
        self.canvas.draw()
    
    def contours(self):   
        sel = "Cont " + str( self.c1.get() ) 
        self.l1.config(text = sel, font =("Courier", 12)) 
    
    def next(self, _event=None):
        global counter
        counter += 1
        self.plot()        

    def overlay_specs(self, _event=None):
        global overlay, counter
        overlay=True
        counter=-1

        self.overlay_window=tk.Toplevel()
        self.fig1 = plt.figure(10, figsize=(5, 5))
        canvas1 = FigureCanvasTkAgg(self.fig1,  master = self.overlay_window)
        toolbar = NavigationToolbar2Tk(canvas1, self.overlay_window, pack_toolbar = False ) 
        toolbar.update()
        toolbar.pack() 

        self.plot()
        canvas1.draw()
        canvas1.get_tk_widget().pack() 

        overlay=False
        counter = 0
        self.overlay_window.protocol('WM_DELETE_WINDOW', self.close_overlay)
        self.overlay_window.mainloop()
    
    def create_axis(self):
        global overlay
        if overlay:
            self.ax = self.fig1.add_subplot(111)


    def plot(self, _event=None ):

        global overlay, counter

        if overlay:
            self.create_axis()
            ax=self.ax
            toplot=self.specs
        else:
            ax = self.fig.add_subplot(111)    
            
            if counter==len(self.specs):
                counter=0

            toplot=  [self.specs[counter] ]
            
        for i, spec in enumerate( toplot ):
            if overlay:
                counter += 1

            twoD=TwoD(spec)
            spectrum=twoD.read_spec(scale=self.scale)
            peaks=twoD.loadpeaks(self.inputfile)

            assignment=list(peaks[ spectrum[-1] ].keys())[0]
            colors_p=mpl.cm.get_cmap(twoD.cmap_p)(np.linspace(0, 1, len(self.specs)+0)) 
            colors_n=mpl.cm.get_cmap(twoD.cmap_n)(np.linspace(0, -1, len(self.specs)+0)) 

            labels=twoD.draw_peaks(spectrum[-1], peaks, ax, color=mpl.colors.rgb2hex(colors_p[counter]) , compact=True)

            dic, data, ppm_x1, ppm_y1, dir= twoD.extract( spectrum,  x_ppm=(labels[0][0],  labels[0][1]), y_ppm=(labels[1][0],  labels[1][1]) )
        
            ppm_x1_0, ppm_x1_1 =  ppm_x1[0],  ppm_x1[-1]
            ppm_y1_0, ppm_y1_1 =  ppm_y1[0],  ppm_y1[-1] 

            #keep here to have the future option for auto countours for each spec
            contour_start =   self.c1.get()    # contour level start value
            contour_num = 10                # number of contour levels
            contour_factor = 1.20          # scaling factor between contour levels
            cl = contour_start * contour_factor ** np.arange(contour_num) 
            cl_neg = -cl[::-1]

            ax.contour(data, cl, colors=mpl.colors.rgb2hex(colors_p[counter]), extent=(ppm_x1_0, ppm_x1_1, ppm_y1_0, ppm_y1_1) )
            ax.contour(data, cl_neg, colors=mpl.colors.rgb2hex(colors_n[counter]), extent=(ppm_x1_0, ppm_x1_1, ppm_y1_0, ppm_y1_1) )
            
            ax.set_title(assignment)
            ax.set_xlim( ppm_x1_0,  ppm_x1_1)
            ax.set_ylim( ppm_y1_0, ppm_y1_1)
                
        self.canvas.draw()


